https://8weeksqlchallenge.com/

Case Study #1 - Danny's Diner
Introduction
Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and 
opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen.

Danny’s Diner is in need of your assistance to help the restaurant stay afloat - 
the restaurant has captured some very basic data from their few months of operation but have no idea how to use their 
data to help them run the business.

Problem Statement
Danny wants to use the data to answer a few simple questions about his customers,
 especially about their visiting patterns, how much money they’ve spent and also which menu items are their favourite.
 Having this deeper connection with his customers will help him deliver a better and more personalised experience for his
 loyal customers.

He plans on using these insights to help him decide whether he should expand the existing customer loyalty program 
- additionally he needs help to generate some basic datasets so his team can easily inspect the data without needing to use SQL.

Danny has provided you with a sample of his overall customer data due to privacy issues - 
but he hopes that these examples are enough for you to write fully functioning SQL queries to help him answer his questions!

Danny has shared with you 3 key datasets for this case study:

sales
menu
members
-------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL command to create database and tables:

CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

-----------------------------------------------------------------------------
  
   Case Study Questions
   ----------------------------

-- 1. What is the total amount each customer spent at the restaurant?

with cte as (
select s.customer_id,s.order_date,s.product_id,m.join_date,mn.product_name,mn.price
	from dannys_diner.sales s 
   	 full join dannys_diner.members m on s.customer_id=m.customer_id
  	 join dannys_diner.menu mn on s.product_id=mn.product_id)
    
select customer_id,sum(price) as Total_transaction from cte 
group by customer_id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 2. How many days has each customer visited the restaurant?

select customer_id,
	count(distinct order_date) as customer_visit 
	from cte 
	group by customer_id;

output:

customer_id		customer_visit
A				4
B				6
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 3. What was the first item from the menu purchased by each customer?
with cte as (
select s.customer_id,s.order_date,s.product_id,m.join_date,mn.product_name,mn.price
	from dannys_diner.sales s 
   	full  join dannys_diner.members m on s.customer_id=m.customer_id
  	 join dannys_diner.menu mn on s.product_id=mn.product_id)

,rank as (
  select product_name ,
		row_number()over(partition by customer_id order by order_date) as "rank"
        from cte)
  
 select product_name from rank
 where rank = 1;  

output:

customer_id	product_name
A	sushi
B	curry
C	ramen
--------------------------------------------------------------------------------------------------------------------------------------------------------------
   -- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
 
 select product_name,(count(product_id)) as count from cte
        group by product_name
        order by count desc limit 1;
output:
product_name	count
ramen			    8
--------------------------------------------------------------------------------------------------------------------------------------------------------------

--5. Which item was the most popular for each customer?
select a.customer_id,a.product_name 
from (
select customer_id,product_name,(count(product_id)) as count,
     row_number() over(partition by customer_id order by count(product_id) desc) as "rank"
 from cte
       group by customer_id, product_name
       order by customer_id,count desc ) as a
       where rank=1;

output:
customer_id		product_name
A			    ramen
B	                       sushi
C			   ramen

--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 6. Which item was purchased first by the customer after they became a member?

select  a.customer_id,a.product_name from(
  select customer_id ,product_name,order_date,join_date,row_number()over(
  partition by customer_id order by order_date) as rownumber from cte
 where order_date>join_date ) as a
 where rownumber=1;

output:
customer_id			product_name
A				      ramen
B				      sushi
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 7. Which item was purchased just before the customer became a member?
with cte as (
		select s.customer_id,s.order_date,s.product_id,m.join_date,
  			mn.product_name,mn.price
	from dannys_diner.sales s 
   	full join dannys_diner.members m on s.customer_id=m.customer_id
  	 join dannys_diner.menu mn on s.product_id=mn.product_id)
     
  select  a.customer_id,a.product_name from(
  select customer_id ,product_name,order_date,join_date,rank()over(
  partition by customer_id order by order_date desc) as rank from cte
 where order_date<join_date ) as a
 where rank=1;

output:
customer_id		product_name
A				sushi
A				curry
B				sushi
--------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 8. What is the total items and amount spent for each member before they became a member?
with cte as (
		select s.customer_id,s.order_date,s.product_id,m.join_date,
  			mn.product_name,mn.price
	from dannys_diner.sales s 
   	 full join dannys_diner.members m on s.customer_id=m.customer_id
  	join dannys_diner.menu mn on s.product_id=mn.product_id
    
    )
  select customer_id,sum(price)
  			from cte
 			where order_date<join_date or join_date is null
 			group by customer_id
            order by 1;

output:
customer_id		sum
A			25
B			40
C			36

--------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

with cte as (
		select s.customer_id,s.order_date,s.product_id,m.join_date,
  			mn.product_name,mn.price
	from dannys_diner.sales s 
   	 full join dannys_diner.members m on s.customer_id=m.customer_id
  	join dannys_diner.menu mn on s.product_id=mn.product_id
    
    )
  select customer_id,
  sum(case when product_name = 'sushi' then price*20 else price*10 end ) from cte
  group by customer_id;

output:
customer_id		sum
B			940
C			360
A			860
--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

with cte as (
		select s.customer_id,s.order_date,s.product_id,m.join_date,
  			mn.product_name,mn.price
	from dannys_diner.sales s 
   	 full join dannys_diner.members m on s.customer_id=m.customer_id
  	join dannys_diner.menu mn on s.product_id=mn.product_id
    
    )
  select customer_id,
  sum
  	(case 
	when (order_date>join_date+interval '6 days' and product_name<>'sushi') 
	then price*10
	 else price*20 
			end ) from cte
  where join_date is not null
  group by customer_id;

